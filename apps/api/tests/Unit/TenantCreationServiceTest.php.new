<?php

use App\Events\TenantCreated;
use App\Exceptions\InvitationException;
use App\Exceptions\TenantCreationException;
use App\Exceptions\TenantValidationException;
use App\Models\Company;
use App\Models\Invitation;
use App\Services\Caching\TenantCacheService;
use App\Services\ErrorHandling\TenantCleanupService;
use App\Services\TenantCreationService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Mail;

uses(RefreshDatabase::class);

describe('TenantCreationService Unit Tests', function () {
    beforeEach(function () {
        // Mock external dependencies for testing
        Mail::fake();
        Event::fake();
        Log::spy();

        // Create service dependencies manually since they're not auto-bound
        $cacheService = new TenantCacheService();
        $cleanupService = new TenantCleanupService();
        $this->service = new TenantCreationService($cleanupService, $cacheService);
    });

    it('can instantiate TenantCreationService', function () {
        expect($this->service)->toBeInstanceOf(TenantCreationService::class);
    });

    describe('createTenantWithAdmin', function () {
        it('creates tenant with admin successfully', function () {
            $companyData = [
                'name' => 'Test Company',
                'domain' => 'testcompany' . rand(100, 999),
            ];
            $adminData = [
                'email' => 'admin@test.com',
                'role' => 'admin',
            ];

            $result = $this->service->createTenantWithAdmin($companyData, $adminData);

            expect($result)->toHaveKey('company')
                ->and($result)->toHaveKey('invitation')
                ->and($result['company'])->toBeInstanceOf(Company::class)
                ->and($result['invitation'])->toBeInstanceOf(Invitation::class)
                ->and($result['company']->name)->toBe($companyData['name'])
                ->and($result['invitation']->email)->toBe($adminData['email']);

            // Verify events were dispatched
            Event::assertDispatched(TenantCreated::class);
        });

        it('throws exception for invalid company data', function () {
            $companyData = ['name' => '', 'domain' => ''];
            $adminData = ['email' => 'admin@test.com'];

            expect(fn () => $this->service->createTenantWithAdmin($companyData, $adminData))
                ->toThrow(TenantValidationException::class);
        });

        it('throws exception for invalid email', function () {
            $companyData = [
                'name' => 'Test Company',
                'domain' => 'testcompany' . rand(100, 999),
            ];
            $adminData = ['email' => 'invalid-email'];

            expect(fn () => $this->service->createTenantWithAdmin($companyData, $adminData))
                ->toThrow(TenantCreationException::class);
        });

        it('handles tenant creation errors gracefully', function () {
            // Create a company with an existing domain to trigger validation error
            Company::factory()->create(['domain' => 'existing-domain']);

            $companyData = [
                'name' => 'Test Company',
                'domain' => 'existing-domain', // This should cause a conflict
            ];
            $adminData = ['email' => 'admin@test.com'];

            expect(fn () => $this->service->createTenantWithAdmin($companyData, $adminData))
                ->toThrow(TenantValidationException::class);
        });
    });

    describe('acceptInvitation', function () {
        it('accepts invitation successfully', function () {
            $company = Company::factory()->create();
            $invitation = Invitation::factory()->create([
                'tenant_id' => $company->id,
                'accepted_at' => null,
                'expires_at' => now()->addDays(7),
            ]);

            $userData = [
                'name' => 'Test User',
                'password' => 'password123',
            ];

            $user = $this->service->acceptInvitation($invitation->token, $userData);

            expect($user->email)->toBe($invitation->email)
                ->and($user->name)->toBe($userData['name'])
                ->and($user->tenant_id)->toBe($company->id);

            // Verify invitation is marked as accepted
            $invitation->refresh();
            expect($invitation->accepted_at)->not->toBeNull();
        });

        it('throws exception for expired invitation', function () {
            $invitation = Invitation::factory()->create([
                'expires_at' => now()->subDays(1), // Expired yesterday
                'accepted_at' => null,
            ]);

            $userData = [
                'name' => 'Test User',
                'password' => 'password123',
            ];

            expect(fn () => $this->service->acceptInvitation($invitation->token, $userData))
                ->toThrow(InvitationException::class);
        });

        it('throws exception for already accepted invitation', function () {
            $invitation = Invitation::factory()->create([
                'accepted_at' => now()->subHour(),
                'expires_at' => now()->addDays(7),
            ]);

            $userData = [
                'name' => 'Test User',
                'password' => 'password123',
            ];

            expect(fn () => $this->service->acceptInvitation($invitation->token, $userData))
                ->toThrow(InvitationException::class);
        });

        it('throws exception for invalid token', function () {
            $userData = [
                'name' => 'Test User',
                'password' => 'password123',
            ];

            expect(fn () => $this->service->acceptInvitation('invalid-token', $userData))
                ->toThrow(InvitationException::class);
        });
    });

    describe('error handling and cleanup', function () {
        it('calls cleanup service on tenant creation failure', function () {
            $companyData = ['name' => 'Test Company', 'domain' => ''];
            $adminData = ['email' => 'admin@test.com'];

            expect(fn () => $this->service->createTenantWithAdmin($companyData, $adminData))
                ->toThrow(TenantValidationException::class);
        });

        it('logs errors appropriately', function () {
            $companyData = ['name' => 'Test Company', 'domain' => ''];
            $adminData = ['email' => 'admin@test.com'];

            try {
                $this->service->createTenantWithAdmin($companyData, $adminData);
            } catch (TenantValidationException $e) {
                // Expected exception
            }

            // Verify that logging occurred (this is a simplified check)
            expect(true)->toBeTrue(); // Placeholder - in real implementation would check Log::spy()
        });
    });
});
